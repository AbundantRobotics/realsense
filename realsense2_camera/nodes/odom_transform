#!/usr/bin/env python
from __future__ import print_function
import rospy
import tf2_ros
import argparse
from nav_msgs.msg import Odometry
from quaternion import AxisAngle, Quat
import numpy as np

pub = None

def publish_transformed(msg, T):
    global pub
    out = Odometry()
    out.header = msg.header
    out.header.frame_id = 'odom'
    out.child_frame_id = 'base_footprint_link'

    q = Quat(
        T.transform.rotation.x,
        T.transform.rotation.y,
        T.transform.rotation.z,
        T.transform.rotation.w
    )
    translate = np.array([
        T.transform.translation.x,
        T.transform.translation.y,
        T.transform.translation.z
    ])

    # position
    pos = np.array([
        msg.pose.pose.position.x,
        msg.pose.pose.position.y,
        msg.pose.pose.position.z
    ])
    out_pos = (q.inv * pos * q)[:3]
    out.pose.pose.position.x = out_pos[0]
    out.pose.pose.position.y = out_pos[1]
    out.pose.pose.position.z = out_pos[2]

    # orientation
    rot = Quat(
        msg.pose.pose.orientation.x,
        msg.pose.pose.orientation.y,
        msg.pose.pose.orientation.z,
        msg.pose.pose.orientation.w
    )
    out_rot = rot * q
    out.pose.pose.orientation = out_rot.msg
    out.pose.covariance = msg.pose.covariance

    # angular vel
    ang = np.array([
        msg.twist.twist.angular.x,
        msg.twist.twist.angular.y,
        msg.twist.twist.angular.z
    ])
    out_ang = (q.inv * ang * q)[:3]
    out.twist.twist.angular.x = out_ang[0]
    out.twist.twist.angular.y = out_ang[1]
    out.twist.twist.angular.z = out_ang[2]

    # linear accel
    accel = np.array([
        msg.twist.twist.linear.x,
        msg.twist.twist.linear.y,
        msg.twist.twist.linear.z
    ])
    out_accel = (q.inv * accel * q)[:3]
    out.twist.twist.linear.x = out_accel[0]
    out.twist.twist.linear.y = out_accel[1]
    out.twist.twist.linear.z = out_accel[2]

    out.twist.covariance = msg.twist.covariance

    if pub:
        pub.publish(out)


def main():
    parser = argparse.ArgumentParser('transform VO')
    parser.add_argument('topic')
    parser.add_argument('odom_tran')
    parser.add_argument('vo_tran')
    args = parser.parse_args()
    rospy.init_node('transform_vo')


    buf = tf2_ros.Buffer()
    lis = tf2_ros.TransformListener(buf)
    trans = None
    while not trans:
        try:
            trans = buf.lookup_transform(args.vo_tran, args.odom_tran, rospy.Time())
        except Exception as e:
            pass
    global pub
    pub = rospy.Publisher('odometry_transformed', Odometry, queue_size=10)
    sub = rospy.Subscriber(args.topic, Odometry, lambda m: publish_transformed(m, trans), queue_size=10)
    rospy.spin()
    return 0


if __name__ == '__main__':
    import sys
    sys.exit(main())
